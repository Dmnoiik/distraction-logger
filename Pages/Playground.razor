@page "/playground"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper

@if (_viewModels is not null)
{
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudStack Spacing="3">
            <MudExpansionPanels MultiExpansion="false">
                <MudExpansionPanel Text="Gowno1">
                    Test 1
                </MudExpansionPanel>
                <MudExpansionPanel Text="Gowno2">
                    Test 2
                </MudExpansionPanel>
                <MudExpansionPanel Text="Gowno3">
                    Test 3
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudStack>
    </MudContainer>
}


@code {
    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();
    private Dictionary<DateTime, List<DistractionLogViewModel>> _datesDict = new Dictionary<DateTime, List<DistractionLogViewModel>>();

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetAllLogsAsync();
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        foreach (var viewModel in _viewModels)
        {
            DateTime viewModelDate = viewModel.DateOfCreation.Date;
            if (_datesDict.ContainsKey(viewModel.DateOfCreation.Date))
            {
                _datesDict[viewModelDate].Add(viewModel);
            }
            else
            {
                _datesDict.Add(viewModelDate, new List<DistractionLogViewModel> { viewModel });
            }
        }
    }
}