@page "/playground"
@using Distraction_Logger_PWA.Data.LogsData
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject NavigationManager _Navigator

<MudText>Playground</MudText>

@if (_models is not null)
{
    @foreach (var model in _models)
    {
        <MudCard Square>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom>@model.Date.ToString()</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudChipSet T="DistractionTag" ReadOnly>
                </MudChipSet>
                <MudText>@model.Notes</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" OnClick="(() => DeleteLog(model))" Variant="Variant.Filled">Delete distraction</MudButton>
            </MudCardActions>
        </MudCard>
    }
}

@code {
    private IMagicQuery<DistractionLogModel>? _logQuery;
    private List<DistractionLogModel>? _models;

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetAllLogsAsync();
    }

    private async Task DeleteLog(DistractionLogModel modelToDelete)
    {
        await _logQuery.DeleteAsync(modelToDelete);
        _models.Remove(modelToDelete);
        StateHasChanged();
    }
}
