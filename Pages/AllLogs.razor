@page "/all"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper

@if (_models is not null)
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudText Class="my-3" Align=Align.Center Typo="Typo.h4">All logs grouped by date</MudText>
        <MudDivider />
        <MudStack Spacing="3">
            <MudExpansionPanels MultiExpansion="false">
                @foreach (DateTime uniqueDate in _datesDict.Keys)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudText>📆 @uniqueDate.ToShortDateString()</MudText>
                            @{
                                var tagsCount = TagAnalyzer.GetDescFrequencyTags(_datesDict[uniqueDate]);
                                var mostFrequentTags = TagAnalyzer.GetTopFrequentTags(tagsCount);
                                <DistractionMostFrequentTags Tags="mostFrequentTags" />
                            }

                        </TitleContent>
                        <ChildContent>
                            <MudStack Spacing="3" Row Wrap="Wrap.Wrap" Class="pa-3" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                @foreach (DistractionLogViewModel viewModel in _datesDict[uniqueDate])
                                {
                                    <DistractionLogCard model="viewModel" ShouldHaveDelete="false"></DistractionLogCard>
                                }
                            </MudStack>
                        </ChildContent>

                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudStack>
    </MudContainer>
}


@code {


    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();
    private Dictionary<DateTime, List<DistractionLogViewModel>> _datesDict = new Dictionary<DateTime, List<DistractionLogViewModel>>();

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetAllLogsAsync();
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        _datesDict = LogAnalyzer.GetLogsByUniqueDates(_viewModels);
    }

    private Dictionary<DateTime, List<DistractionLogViewModel>> CreateLogsByDatesDict(List<DistractionLogViewModel> viewModels)
    {
        Dictionary<DateTime, List<DistractionLogViewModel>> outputDict = new();

        foreach (var viewModel in viewModels)
        {
            DateTime viewModelDate = viewModel.DateOfCreation.Date;
            if (outputDict.ContainsKey(viewModelDate))
            {
                outputDict[viewModelDate].Add(viewModel);
            }
            else
            {
                outputDict.Add(viewModelDate, new List<DistractionLogViewModel> { viewModel });
            }
        }
        return outputDict;
    }
}
