@page "/all"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudStack Spacing="3">
        @if (_models is not null && _datesDict is not null)
        {
            <MudExpansionPanels>
                @foreach (DateTime uniqueDate in _uniqueDates)
                {
                    <MudExpansionPanel Text="@uniqueDate.ToLongDateString()">
                        @{
                            var currentViewModelList = _datesDict[uniqueDate];
                            foreach (var viewModel in currentViewModelList)
                            {
                                <DistractionLogCard model="@viewModel" OnDelete="@DeleteLog" />

                            }
                        }
                        @*                         @foreach (var viewModel in _datesDict[uniqueDate.Date])
                        {
                            <DistractionLogCard model="@viewModel" OnDelete="@DeleteLog" />
                        } *@

                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        }
    </MudStack>
</MudContainer>


@code {
    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();
    // private HashSet<DateTime> _uniqueDates = new HashSet<DateTime>();
    private Dictionary<DateTime, List<DistractionLogViewModel>> _datesDict = new Dictionary<DateTime, List<DistractionLogViewModel>>();

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetAllLogsAsync();
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        // _uniqueDates = GetUniqueDates();
        foreach (var uniqueDate in _uniqueDates)
        {
            var viewModelsForDate = GetViewModelsForDate(uniqueDate);
            Console.WriteLine($"Loaded views for date ({uniqueDate}): {viewModelsForDate.Count}");
            _datesDict.Add(uniqueDate, viewModelsForDate);
        }
    }

    private HashSet<DateTime> GetUniqueDates()
    {
        HashSet<DateTime> uniqueDates = new HashSet<DateTime>();
        foreach (var model in _models)
        {
            uniqueDates.Add(model.Date.Date);
        }
        return uniqueDates;
    }

    private List<DistractionLogViewModel> GetViewModelsForDate(DateTime date)
    {
        List<DistractionLogViewModel> output = new List<DistractionLogViewModel>();
        output = _viewModels.Where(viewModel => viewModel.DateOfCreation.Date == date.Date).ToList();

        if (output is null)
        {
            throw new Exception($"Couldn't find models for date: {date.Date}");
        }

        return output;
    }


    private async Task DeleteLog(long modelToDeleteId)
    {
        DistractionLogModel modelToDelete = _models.First(x => x.ID == modelToDeleteId);
        DistractionLogViewModel viewModelToRemove = _viewModels.First(x => x.Id == modelToDeleteId);
        await LogsRepo.DeleteLogAsync(modelToDelete);
        _models.Remove(modelToDelete);
        _viewModels.Remove(viewModelToRemove);
    }
}
