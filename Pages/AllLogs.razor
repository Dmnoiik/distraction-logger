@page "/all"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper

@if (_models is not null)
{
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudStack Spacing="3">
            <div class="mycontainer">
                <MudExpansionPanels MultiExpansion="false">
                    @foreach (DateTime uniqueDate in _datesDict.Keys)
                    {
                        <MudExpansionPanel>
                            <TitleContent>
                                <MudText>📆 @uniqueDate.ToShortDateString()</MudText>
                                <MudText>Most appeared tag: XD</MudText>
                            </TitleContent>
                            <ChildContent>
                                @foreach (DistractionLogViewModel viewModel in _datesDict[uniqueDate])
                                {
                                    <DistractionLogCard model="viewModel" OnDelete="@DeleteLog"></DistractionLogCard>
                                }
                            </ChildContent>

                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </div>
        </MudStack>
    </MudContainer>
}


@code {
    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();
    private Dictionary<DateTime, List<DistractionLogViewModel>> _datesDict = new Dictionary<DateTime, List<DistractionLogViewModel>>();

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetAllLogsAsync();
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        _datesDict = CreateLogsByDatesDict(_viewModels);
    }

    private Dictionary<DateTime, List<DistractionLogViewModel>> CreateLogsByDatesDict(List<DistractionLogViewModel> viewModels)
    {
        Dictionary<DateTime, List<DistractionLogViewModel>> outputDict = new();

        foreach (var viewModel in _viewModels)
        {
            DateTime viewModelDate = viewModel.DateOfCreation.Date;
            if (outputDict.ContainsKey(viewModelDate))
            {
                outputDict[viewModelDate].Add(viewModel);
            }
            else
            {
                outputDict.Add(viewModelDate, new List<DistractionLogViewModel> { viewModel });
            }
        }
        return outputDict;
    }


    private async Task DeleteLog(long modelToDeleteId)
    {
        DistractionLogModel modelToDelete = _models.First(x => x.ID == modelToDeleteId);
        DistractionLogViewModel viewModelToRemove = _viewModels.First(x => x.Id == modelToDeleteId);
        await LogsRepo.DeleteLogAsync(modelToDelete);
        _models.Remove(modelToDelete);
        _viewModels.Remove(viewModelToRemove);
    }
}
