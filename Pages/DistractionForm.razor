@inject DistractionTagRepository TagsRepo

<MudContainer MaxWidth="MaxWidth.ExtraSmall">
    <MudCard Square>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom>My current distraction</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.caption" Color="Color.Secondary">Select one or more distractions below.</MudText>
                @if (_tags is not null)
                {
                    <MudChipSet T="DistractionTag" @bind-SelectedValues="_selectedTags" CheckMark SelectionMode="SelectionMode.MultiSelection">
                        @foreach (var tag in _tags)
                        {
                            var color = TagsRepo.GetTagColor(tag.ColorKey);
                            var icon = TagsRepo.GetTagIcon(tag.IconKey);

                            <DistractionTagChip ChipColor="@color"
                                                ChipIcon="@icon"
                                                Tag="@tag">
                            </DistractionTagChip>
                        }
                    </MudChipSet>
                }
            </MudStack>

            <MudTextField Placeholder="e.g., Watched 3 videos before realizing it." @bind-Value="_textValue" Label="Want to write more?" Variant="Variant.Text"></MudTextField>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit">Save distraction</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private List<DistractionTag>? _tags;
    private IReadOnlyCollection<DistractionTag>? _selectedTags;
    private string? _textValue;

    protected override async Task OnInitializedAsync()
    {
        _tags = await TagsRepo.GetStandardTagsAsync();
    }
}
