@page "/stats"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper

<MudText Typo="Typo.h1">Statistics</MudText>
<MudContainer MaxWidth="MaxWidth.Large">

    <MudGrid>
        <MudItem xs="12">
            <MudPaper>
                <MudSelect 
                @bind-Value="_lastXDays"
                Label="Logs from">
                    <MudSelectItem Value="3">Last 3 days</MudSelectItem>
                    <MudSelectItem Value="7">Last 7 days</MudSelectItem>
                    <MudSelectItem Value="30">Last 30 days</MudSelectItem>
                </MudSelect>
                <MudButton ButtonType="ButtonType.Button" OnClick="FilterLogsByDate">Filter logs</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <DistractionMostFrequentTags Tags="_mostFrequentTags"/>
                <MudDivider />
                <ul class="tags-count">
                    @foreach (TagWithFrequency tagFrequency in _tagsFrequency)
                    {
                        <li class="tag-with-count"><DistractionChipView Tag="@tagFrequency.TagViewModel" />: @tagFrequency.Frequency</li>
                    }
                </ul>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper>
                <MudChart ChartType="ChartType.Line" XAxisLabels="@GetXAxisLabels(_viewModels)" ChartSeries="GetSeriesForChart(_logsByUniqueDates)"/>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
        </MudItem>
        <MudItem xs="6">
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();
    private List<TagWithFrequency> _tagsFrequency = new();
    private List<DistractionTagViewModel> _mostFrequentTags = new();
    private Dictionary<DateTime, List<DistractionLogViewModel>> _logsByUniqueDates = new Dictionary<DateTime, List<DistractionLogViewModel>>();
    private int _lastXDays = 7;

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetLogsFromLastXDays();
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        _tagsFrequency = TagAnalyzer.GetDescFrequencyTags(_viewModels);
        _mostFrequentTags = TagAnalyzer.GetTopFrequentTags(_tagsFrequency);
        _logsByUniqueDates = LogAnalyzer.GetLogsByUniqueDates(_viewModels);
    }

    private async Task FilterLogsByDate()
    {
        _models = await LogsRepo.GetLogsFromLastXDays(_lastXDays);
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        _tagsFrequency = TagAnalyzer.GetDescFrequencyTags(_viewModels);
        _mostFrequentTags = TagAnalyzer.GetTopFrequentTags(_tagsFrequency);
        _logsByUniqueDates = LogAnalyzer.GetLogsByUniqueDates(_viewModels);
        foreach (var (uniqueDate, viewModels) in _logsByUniqueDates)
        {
            Console.WriteLine($"DATE: {uniqueDate.ToShortDateString()}. Num of models: {viewModels.Count}");
        }
    }

    private string[] GetXAxisLabels(List<DistractionLogViewModel> models)
    {
        var uniqueDates = _logsByUniqueDates.Keys;
        return uniqueDates
        .Select(date => date.ToShortDateString())
        .ToArray();
    }

    private List<ChartSeries> GetSeriesForChart(Dictionary<DateTime, List<DistractionLogViewModel>> logsByDate)
    {
        List<ChartSeries> logsPerDaySeries = new();

        ChartSeries logsPerDay = new();
        logsPerDay.Name = "Logs per day";

        List<double> numOfLogsPerDay = new();

        foreach(var (uniqueDate, viewModels) in logsByDate)
        {
            numOfLogsPerDay.Add(viewModels.Count);
        }
        logsPerDay.Data = numOfLogsPerDay.ToArray();
        logsPerDaySeries.Add(logsPerDay);
        return logsPerDaySeries;
    }
}
