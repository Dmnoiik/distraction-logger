@page "/stats"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper

<MudText Typo="Typo.h1">Statistics</MudText>
<MudContainer MaxWidth="MaxWidth.Large">

    <MudGrid>
        <MudItem xs="6">
            <MudPaper>
                <MudStack Row Spacing="3">
                    <MudText>Most frequent tag@(_mostFrequentTags.Count >= 1 ? "s" : ""): </MudText>
                    @foreach(var mostFrequentTag in _mostFrequentTags)
                    {
                        <DistractionChipView Tag="mostFrequentTag" />
                    }
                </MudStack>
                <MudDivider />
                <ul class="tags-count">
                    @foreach (TagWithFrequency tagFrequency in _tagsFrequency)
                    {
                        <li class="tag-with-count"><DistractionChipView Tag="@tagFrequency.TagViewModel" />: @tagFrequency.Frequency</li>
                    }
                </ul>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
        </MudItem>
        <MudItem xs="6">
        </MudItem>
        <MudItem xs="6">
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();
    private List<TagWithFrequency> _tagsFrequency = new();
    private List<DistractionTagViewModel> _mostFrequentTags = new();

    protected override async Task OnInitializedAsync()
    {
        _models = await LogsRepo.GetAllLogsAsync();
        _viewModels = await LogsMapper.MapToViewModelList(_models);
        _tagsFrequency = GetDescFrequencyTags(_viewModels);
        _mostFrequentTags = GetTopFrequentTags(_tagsFrequency);
    }

    private List<TagWithFrequency> GetDescFrequencyTags(List<DistractionLogViewModel> models)
    {
        var tagsCount = TagAnalyzer.GetTagsCount(models);
        var orderedTagsCount = tagsCount.OrderByDescending(x => x.Value.Frequency).ToDictionary();
        return orderedTagsCount.Values.ToList();
    }

    private List<DistractionTagViewModel> GetTopFrequentTags(List<TagWithFrequency> tagsWithFrequency)
    {
        List<DistractionTagViewModel> tagsOutput = new();
        int mostFrequentTagCount = tagsWithFrequency.First().Frequency;
        var topFrequentTags = tagsWithFrequency.Where(tag => tag.Frequency == mostFrequentTagCount).ToList();
        if (topFrequentTags is not null && topFrequentTags.Count >= 1)
        {
            foreach (var tag in topFrequentTags)
            {
                tagsOutput.Add(tag.TagViewModel);
            }
        }
        else
        {
            throw new Exception("Couldn't find top frequent tags");
        }
        return tagsOutput;
    }
}
