@page "/today"
@inject DistractionLogRepository LogsRepo
@inject DistractionTagRepository TagsRepo
@inject DistractionLogMapper LogsMapper
@inject DistractionTagMapper TagsMapper


<MudText Align="Align.Center" Typo="Typo.h2">@_todayDate.ToString("dd.MM.yyyy")</MudText>
<MudContainer MaxWidth="MaxWidth.Large">
    <MudStack Spacing="3" Row>
        @if (_models is not null)
        {
            @foreach (var viewModel in _viewModels)
            {
                <DistractionLogCard model="@viewModel" OnDelete="@DeleteLog" ShouldHaveDelete/>
            }
        }
    </MudStack>
</MudContainer>

@code {
    private DateTime _todayDate;
    private List<DistractionLogViewModel> _viewModels = new List<DistractionLogViewModel>();
    private List<DistractionLogModel> _models = new List<DistractionLogModel>();

    protected override async Task OnInitializedAsync()
    {
        _todayDate = DateTime.Now.Date;
        _models = await LogsRepo.GetTodayLogsAsync();
        foreach (var model in _models)
        {
            DistractionLogViewModel viewModel = await LogsMapper.MapToViewModel(model);
            _viewModels.Add(viewModel);
        }
    }

    private async Task DeleteLog(long modelToDeleteId)
    {
        DistractionLogModel modelToDelete = _models.First(x => x.ID == modelToDeleteId);
        DistractionLogViewModel viewModelToRemove = _viewModels.First(x => x.Id == modelToDeleteId);
        await LogsRepo.DeleteLogAsync(modelToDelete);
        _models.Remove(modelToDelete);
        _viewModels.Remove(viewModelToRemove);
    }
}
